// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import list_poi from "./poi/list-poi.mjs";
import retrieve_referencedata from "./referencedata/retrieve-referencedata.mjs";
import authenticate_profile from "./profile/authenticate-profile.mjs";
import submit_comment from "./comment/submit-comment.mjs";
import create_mediaitem from "./mediaitem/create-mediaitem.mjs";
import retrieve_openapi from "./openapi/retrieve-openapi.mjs";
export const endpoints = [];
function addEndpoint(endpoint) {
    endpoints.push(endpoint);
}
addEndpoint(list_poi);
addEndpoint(retrieve_referencedata);
addEndpoint(authenticate_profile);
addEndpoint(submit_comment);
addEndpoint(create_mediaitem);
addEndpoint(retrieve_openapi);
export function query(filters, endpoints) {
    const allExcludes = filters.length > 0 && filters.every((filter) => filter.op === 'exclude');
    const unmatchedFilters = new Set(filters);
    const filtered = endpoints.filter((endpoint) => {
        let included = false || allExcludes;
        for (const filter of filters) {
            if (match(filter, endpoint)) {
                unmatchedFilters.delete(filter);
                included = filter.op === 'include';
            }
        }
        return included;
    });
    // Check if any filters didn't match
    const unmatched = Array.from(unmatchedFilters).filter((f) => f.type === 'tool' || f.type === 'resource');
    if (unmatched.length > 0) {
        throw new Error(`The following filters did not match any endpoints: ${unmatched
            .map((f) => `${f.type}=${f.value}`)
            .join(', ')}`);
    }
    return filtered;
}
function match({ type, value }, endpoint) {
    switch (type) {
        case 'resource': {
            const regexStr = '^' + normalizeResource(value).replace(/\*/g, '.*') + '$';
            const regex = new RegExp(regexStr);
            return regex.test(normalizeResource(endpoint.metadata.resource));
        }
        case 'operation':
            return endpoint.metadata.operation === value;
        case 'tag':
            return endpoint.metadata.tags.includes(value);
        case 'tool':
            return endpoint.tool.name === value;
    }
}
function normalizeResource(resource) {
    return resource.toLowerCase().replace(/[^a-z.*\-_]*/g, '');
}
//# sourceMappingURL=index.mjs.map