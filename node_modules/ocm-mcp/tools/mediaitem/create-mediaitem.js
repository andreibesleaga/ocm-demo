"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.tool = exports.metadata = void 0;
const filtering_1 = require("ocm-mcp/filtering");
const types_1 = require("ocm-mcp/tools/types");
exports.metadata = {
    resource: 'mediaitem',
    operation: 'write',
    tags: [],
    httpMethod: 'post',
    httpPath: '/mediaitem',
    operationId: 'post-mediaitem',
};
exports.tool = {
    name: 'create_mediaitem',
    description: "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nSubmit a photo for a specific charging location\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    status: {\n      type: 'string',\n      description: 'status code OK'\n    },\n    description: {\n      type: 'string'\n    }\n  },\n  required: [    'status'\n  ]\n}\n```",
    inputSchema: {
        type: 'object',
        properties: {
            chargePointID: {
                type: 'integer',
                description: 'ID value for the OCM site (POI) this image relates to.',
            },
            imageDataBase64: {
                type: 'string',
                description: 'BASE64 encoded data',
            },
            comment: {
                type: 'string',
                description: 'Optional description of image or context',
            },
            jq_filter: {
                type: 'string',
                title: 'jq Filter',
                description: 'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
            },
        },
        required: ['chargePointID', 'imageDataBase64'],
    },
    annotations: {},
};
const handler = async (client, args) => {
    const { jq_filter, ...body } = args;
    return (0, types_1.asTextContentResult)(await (0, filtering_1.maybeFilter)(jq_filter, await client.mediaitem.create(body)));
};
exports.handler = handler;
exports.default = { metadata: exports.metadata, tool: exports.tool, handler: exports.handler };
//# sourceMappingURL=create-mediaitem.js.map